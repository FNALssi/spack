--- spack-src/core/imt/inc/ROOT/TPoolManager.hxx.orig	2021-04-21 20:09:53.719593000 +0000
+++ spack-src/core/imt/inc/ROOT/TPoolManager.hxx	2021-04-21 20:10:20.659651000 +0000
@@ -35,9 +35,6 @@
 
 #include<memory>
 
-namespace tbb {
-   class task_scheduler_init;
-}
 
 namespace ROOT {
    namespace Internal {
@@ -64,7 +61,6 @@
          TPoolManager(UInt_t nThreads = 0);
          static UInt_t fgPoolSize;
          bool mustDelete = true;
-         tbb::task_scheduler_init *fSched = nullptr;
       };
       /// Get a shared pointer to the manager. Initialize the manager with nThreads if not active. If active,
       /// the number of threads, even if specified otherwise, will remain the same.
--- spack-src/cmake/modules/SearchInstalledSoftware.cmake.orig	2021-07-14 16:15:37.367633518 -0500
+++ spack-src/cmake/modules/SearchInstalledSoftware.cmake	2021-07-14 16:32:54.763044278 -0500
@@ -1157,9 +1157,9 @@
 if(imt AND NOT builtin_tbb)
   message(STATUS "Looking for TBB")
   if(fail-on-missing)
-    find_package(TBB 2018 REQUIRED)
+    find_package(TBB 2018 CONFIG REQUIRED)
   else()
-    find_package(TBB 2018)
+    find_package(TBB CONFIG 2018)
     if(NOT TBB_FOUND)
       message(STATUS "TBB not found, enabling 'builtin_tbb' option")
       set(builtin_tbb ON CACHE BOOL "Enabled because imt is enabled, but TBB was not found" FORCE)
--- spack-src/core/imt/src/TPoolManager.cxx.orig	2021-07-14 16:15:37.406631653 -0500
+++ spack-src/core/imt/src/TPoolManager.cxx	2021-07-14 16:35:06.159765534 -0500
@@ -68,12 +68,12 @@
       TPoolManager::TPoolManager(UInt_t nThreads): fSched(new tbb::task_scheduler_init(tbb::task_scheduler_init::deferred))
       {
          //Is it there another instance of the tbb scheduler running?
-         if (fSched->is_active()) {
-            mustDelete = false;
-         }
+         //if (fSched->is_active()) {
+         //   mustDelete = false;
+         //}
 
-         nThreads = nThreads != 0 ? nThreads : NLogicalCores();
-         fSched ->initialize(nThreads);
+         //nThreads = nThreads != 0 ? nThreads : NLogicalCores();
+         //fSched ->initialize(nThreads);
          fgPoolSize = nThreads;
       };
 
--- spack-src/core/imt/src/TPoolManager.cxx.orig	2021-07-15 15:03:55.958350273 -0500
+++ spack-src/core/imt/src/TPoolManager.cxx	2021-07-15 15:07:22.014497341 -0500
@@ -7,7 +7,7 @@
 #include <unistd.h>
 #include <sys/stat.h>
 #endif
-#include "tbb/task_scheduler_init.h"
+#include <thread>
 
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -52,7 +52,7 @@
             }
          }
       #endif
-         return tbb::task_scheduler_init::default_num_threads();
+         return std::thread::hardware_concurrency();
       }
 
       //Returns the weak_ptr reflecting a shared_ptr to the only instance of the Pool Manager.
@@ -65,7 +65,7 @@
 
       UInt_t TPoolManager::fgPoolSize = 0;
 
-      TPoolManager::TPoolManager(UInt_t nThreads): fSched(new tbb::task_scheduler_init(tbb::task_scheduler_init::deferred))
+      TPoolManager::TPoolManager(UInt_t nThreads) 
       {
          //Is it there another instance of the tbb scheduler running?
          //if (fSched->is_active()) {
@@ -82,7 +82,7 @@
          //Only terminate the tbb scheduler if there was not another instance already
          // running when the constructor was called.
          if (mustDelete) {
-            fSched->terminate();
+            //fSched->terminate();
             fgPoolSize = 0;
          }
       }
--- spack-src/core/imt/CMakeLists.txt.orig	2021-07-15 14:48:29.023671567 -0500
+++ spack-src/core/imt/CMakeLists.txt	2021-07-15 15:01:52.733242434 -0500
@@ -12,7 +12,7 @@
     src/base.cxx
     src/TTaskGroup.cxx
   BUILTINS
-    TBB
+    TBB::tbb
 )
 
 target_include_directories(Clib PRIVATE
@@ -36,7 +36,7 @@
       Core
       Thread
     BUILTINS
-      TBB
+      TBB::tbb
   )
 
   # G__Imt.cxx is automatically added by ROOT_GENERATE_DICTIONARY()
@@ -46,8 +46,8 @@
     src/TThreadExecutor.cxx
   )
 
-  target_include_directories(Imt PRIVATE ${TBB_INCLUDE_DIRS})
-  target_link_libraries(Imt PRIVATE ${TBB_LIBRARIES})
+  target_include_directories(Imt PRIVATE TBB::tbb)
+  target_link_libraries(Imt PRIVATE TBB::tbb)
   set_target_properties(Imt PROPERTIES COMPILE_FLAGS "${TBB_CXXFLAGS}")
 
   ROOT_ADD_TEST_SUBDIRECTORY(test)
